@page "/shipments"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LiveDashboard.Client.ViewModels.Shipments
@using Microsoft.AspNetCore.SignalR.Client
@using LiveDashboard.Shared.Domain
@inject NavigationManager NavigationManager
@inject HttpClient Http

<h1>Shipments</h1>

@if (model == null || model.Shipments == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Origin</th>
                <th>Destination</th>
                <th>Status</th>
                <th>Invoice Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var shipment in model.Shipments)
            {
                <tr>
                    <td>@shipment.Id</td>
                    <td>@shipment.OriginAddress.Label</td>
                    <td>@shipment.DestinationAddress.Label</td>
                    <td>@shipment.StatusFormatted</td>
                    <td>@shipment.InvoiceStatusFormatted</td>
                </tr>
            }
        </tbody>
    </table>

}


@code {

    private HubConnection hubConnection;

    private IndexViewModel model;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            model = await Http.GetFromJsonAsync<IndexViewModel>("Shipment");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        // setup connection, event handlers, and start 
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/shipmenthub"))
            .Build();

        hubConnection.On<int, ShipmentStatus>("ReceiveStatusUpdate", (shipmentId, statusId) =>
        {
            var shipment = model.Shipments.SingleOrDefault(s => s.Id == shipmentId);
            if (shipment != null)
            {
                shipment.Status = statusId;
                StateHasChanged();
            }
        });

        await hubConnection.StartAsync();
    }

}
